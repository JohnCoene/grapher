% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{save_graph}
\alias{save_graph}
\alias{save_graph_html}
\alias{save_graph_json}
\title{Save}
\usage{
save_graph_html(g, file, title = "grapher", background = "#000000", ...)

save_graph_json(g, file)
}
\arguments{
\item{g}{An object of class \code{graph} as 
returned by \code{\link{graph}} or a \code{graph_proxy}
as returned by a function of the same name.}

\item{file}{Name of file to save graph, passed to 
\link[htmlwidgets]{saveWidget} if \code{save_graph_html} is used 
or passed to \link[base]{write} if /code{save_graph_json} is used.}

\item{title}{The title of the page, corresponds to \code{<title>} HTML tag.}

\item{background}{HTML background color, ensure this is a valid hex
color as this is passed to \link[htmlwidgets]{saveWidget} which is very strict.}

\item{...}{Other arguments passed to
\link[htmlwidgets]{saveWidget}.}
}
\description{
Save the graph as HTML or JSON file.
}
\details{
Serialising the data to JSON can take some time depending on the size
of the graph you want to visualise. The \code{save_graph_json} will serialise
the graph to JSON, enabling you to later load it with the \code{\link{graph}}
function, \emph{this will only work with Shiny}.
}
\section{Formats}{

\itemize{
  \item{\code{save_graph_html} - Save visualisation as standalone HTML file.}
  \item{\code{save_graph_json} - Save the graph as JSON to later re-use with the \code{\link{graph}} function.}
}
}

\examples{
# save as HTML
\dontrun{
make_data(10)
 graph(data) %>% 
 save_graph("grapher.html")
}

# use case of JSON
\dontrun{
# create directory to hold json file
dir <- "./tmp"
dir.create(dir)
file <- paste0(dir, "/graph.json")

# create and save large graph as JSON
graph_data <- make_data(1000)
graph(graph_data) %>% 
 graph_static_layout() %>% 
 save_graph_json(file)

# function to delete temp
on_start <- function(){
 onStop(function(){
   unlink(dir, recursive = TRUE, force = TRUE)
 })
}

library(shiny)

# make the directory accessible from shiny
shiny::addResourcePath("graph", dir)

ui <- fluidPage(
 graphOutput("g", height = "100vh")
)

server <- function(input, output){
 output$g <- renderGraph({
   graph(paste0("./graph/graph.json"))
 })
}

shinyApp(ui, server, onStart = on_start)
}

}
