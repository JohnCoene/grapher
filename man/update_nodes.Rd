% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update.R
\name{update_nodes}
\alias{update_nodes}
\alias{update_nodes_color}
\alias{update_nodes_size}
\title{Update Nodes}
\usage{
update_nodes_color(g, data, id, val, var = "color")

update_nodes_size(g, data, id, val, var = "size")
}
\arguments{
\item{g}{An object of class \code{graph} as 
returned by \code{\link{graph}} or a \code{graph_proxy}
as returned by a function of the same name.}

\item{data}{A data.frame containing \code{id}, \code{val}, and \code{var}
of nodes to update.}

\item{id}{Bare column name containing node ids to udapte.}

\item{val}{Bare column name containing new values to set.}

\item{var}{The name of the variable to update.}
}
\description{
Update multiple nodes size and color.
}
\examples{
library(shiny)

g <- make_data(200)

colors <- c("red", "green", "blue", "yellow")

ui <- fluidPage(
 actionButton("update", "Update random nodes"),
 graphOutput("g", height = "80vh")
)

server <- function(input, output) {
 output$g <- render_graph({
   graph(g) \%>\% 
     define_node_size(size) \%>\% 
     graph_stable_layout(ms = 2500)
 })

 observeEvent(input$update, {
   nodes_sample <- g$nodes \%>\% 
     dplyr::sample_n(100) \%>\% 
     dplyr::mutate(
       color = sample(colors, 100, replace = TRUE),
       size = runif(100, 20, 100)
     )

   graph_proxy("g") \%>\% 
     update_nodes_color(nodes_sample, id, color) \%>\% 
     update_nodes_size(nodes_sample, id, size)
 })
}

if(interactive()) shinyApp(ui, server)

}
