% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update.R
\name{update_links}
\alias{update_links}
\alias{update_links_source_color}
\alias{update_links_target_color}
\title{Update Links}
\usage{
update_links_source_color(g, data, source, target, val)

update_links_target_color(g, data, source, target, val)
}
\arguments{
\item{g}{An object of class \code{graph} as 
returned by \code{\link{graph}} or a \code{graph_proxy}
as returned by a function of the same name.}

\item{data}{A data.frame containing nodes data.}

\item{source, target}{Source and target ids of link to update.}

\item{val}{The updated value to assign.}
}
\description{
Update multiple links source and target color.
}
\examples{
library(shiny)

g <- make_data(200)

colors <- c("red", "green", "blue", "yellow")

ui <- fluidPage(
 actionButton("update", "Update random links"),
 graphOutput("g", height = "80vh")
)

server <- function(input, output) {
 output$g <- render_graph({
   graph(g) \%>\% 
     graph_stable_layout(ms = 2500)
 })

 observeEvent(input$update, {
   links_sample <- g$links \%>\% 
     dplyr::sample_n(100) \%>\% 
     dplyr::mutate(
       source_color = sample(colors, 100, replace = TRUE),
       target_color = sample(colors, 100, replace = TRUE)
     )

   graph_proxy("g") \%>\% 
     update_links_source_color(links_sample, source, target, source_color) \%>\% 
     update_links_target_color(links_sample, source, target, target_color)
 })
}

if(interactive()) shinyApp(ui, server)

}
