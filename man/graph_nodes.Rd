% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph.R
\name{graph_nodes}
\alias{graph_nodes}
\title{Add Nodes}
\usage{
graph_nodes(g, data, id, ...)
}
\arguments{
\item{g}{An object of class \code{graph} as 
returned by \code{\link{graph}} or a \code{graph_proxy}
as returned by a function of the same name.}

\item{data}{A data.frame containing nodes data.}

\item{id}{The bare column names containing the nodes ids.}

\item{...}{Any other bare named column containing 
meta data to attach to the nodes.}
}
\description{
Add nodes to the graph.
}
\details{
if the variables \code{x}, \code{y}, and \code{z}
are passed the rendered visualisation is stable 2/3D and
the force layout algorithm is not run.
}
\examples{
graph_data <- make_data()

graph() \%>\% 
  graph_nodes(graph_data$nodes, id)

# using a shiny proxy
library(shiny)

data1 <- make_data(150)
data2 <- make_data(50)

# nodes that do not overalp
# 120 = 30 new nodes added
noverlap <- 120

data2$nodes$id <- as.integer(data2$nodes$id) + noverlap
data2$links$source <- as.integer(data2$links$source) + noverlap
data2$links$target <- as.integer(data2$links$target) + noverlap

ui <- fluidPage(
  actionButton("add", "add"),
  graphOutput("g", height = "90vh")
)

server <- function(input, output) {
  output$g <- render_graph({
    graph(data1) 
  })

  observeEvent(input$add, {
    graph_proxy("g") \%>\% 
      graph_nodes(data2$nodes, id) \%>\% 
      graph_links(data2$links, source, target)
  })
}

\dontrun{shinyApp(ui, server)}

}
\seealso{
\code{\link{graph_links}} to add links.
}
